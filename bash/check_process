#!/usr/bin/env bash
#
# BSD 3-Clause License
#
# Copyright (c) 2019, Â© Badassops LLC / Luc Suryo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#*
#* File			:	check_process
#*
#* Description	:	script to check if the given process name is running and has the correct count
#*
#* Author	:	Luc Suryo <luc@badassops.com>
#*
#* Version	:	0.1
#*
#* Date		:	Feb 18, 2019
#*
#* History	:
#* 		Date:			Author:				Info:
#*		Feb 18, 2019	LIS					First Release to public
#*

_program="${0##*/}"
_author='Luc Suryo'
_copyright="Copyright 2019 - $(date "+%Y") (c) Badassops LLC"
_license='License BSD, http://www.freebsd.org/copyright/freebsd-license.html'
_version='0.1'
_email='luc@badassops.com'
_summary='Script to check if the given process name is running and has the correct count.'
_cancelled="OK : Process has been cancelled on your request."
_info="$_program $_version\n$_copyright\n$_license\nWritten by $_author <$_email>\n$_summary\n"

# check as soon as possible
if [[ "$(uname -s)" != "Linux" ]] ; then
	echo -e "$_info"
	echo -e "This script can only be used on a Linux system, script aborted."
	exit 0
fi

# defined return values
_state_ok=0 ; _state_ok_msg='OK'
_state_critical=2 ; _state_critical_msg='CRITICAL'

# Whatever script needs to be run as root and exclusive lock
_need_root=1
_need_lock=1

# working variables
_opid=$$
_hostname="${HOSTNAME%%.*}"
# allowing multiple user to run the script
_work_dir=/var/tmp/"$_program"-"$USER"
_lockfile="$_work_dir/$_program".LOCK
_echo_flag='-e'
_my_proc=
_my_min=1
_my_max=1
_counter=0

# start Configuration
# Log file
_log_file=/var/log/${_program}.log

# mail variables
_alert_email=0
_email_to=
_email_from=
_email_subject="[$_state_critical_msg $_program on host  $_hostname]"
_email_msg="Process down or count error"
_email_file="$_work_dir"/"$_program".mail

# settings for slack
_alert_slack=0
_slack_cmd=/usr/local/sbin/send_to_slack
_slack_cfg=/etc/bao/slack
_slack_msg="Process down or count error"

# settings for pager duty
_alert_pd=0
_pd_cmd=/usr/local/sbin/send_to_pagerduty
_pd_cfg=/etc/bao/pagerduty
_pd_tag="$_program"
_pd_description="Process down"
_pd_detail="Process down or count error"
# end Configuration

# commands used

# Set interrupt handler
trap inthandler 1 2 3 4 5 9 10 12 15 23 24 25

function inthandler() {
	clean_up
	echo $_echo_flag "$_cancelled"
	exit $_state_ok
}

function clean_up() {
	rm -f "$_lockfile" > /dev/null 2>&1
	return 0
}

function echo_and_log() {
	echo $_echo_flag "$*" #| tee -a $_log_file
	return 0
}

function help() {
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	echo_and_log "$_info"
	echo_and_log "Usage : $_program [-h]  [ option ... ]"
	echo_and_log " Options:"
	echo_and_log " -h this help page."
	echo_and_log " -p value, name of process to check"
	echo_and_log " -c value:value, minimal:maximal process count"
	echo_and_log " -v Show version."
	echo_and_log "\n    Notes:"
	echo_and_log "The more exact process name the better."
	echo_and_log " Default min process count ${_my_min:-no default}"
	echo_and_log " Default max process count ${_my_max:-no default}"
	clean_up
	exit $1
}

function send_mail() {
	(( $_alert_email  == 0 )) && return 0
	local _result=0
	local _cur_time=$(date "+%H:%M %Y-%m-%d")

	_email_msg="$_email_msg process $_my_proc, count is $_counter need $_my_count"

	echo $_echo_flag "From: $_email_to"							> $_email_file
	echo $_echo_flag "To: $_email_from"								>> $_email_file
	echo $_echo_flag "Subject: $_email_subject"						>> $_email_file
	echo $_echo_flag "Content-Type: text/plain; charset=us-ascii"   >> $_email_file
	echo $_echo_flag "Content-Transfer-Encoding: 7bit\n\n"			>> $_email_file
	echo $_echo_flag "$_cur_time: $_email_msg"						>> $_email_file
	echo $_echo_flag "\n\n----------------------"					>> $_email_file
	echo $_echo_flag "Operations Team"								>> $_email_file
	/usr/sbin/sendmail -t < $_email_file
	_result=$(( $? + $_result ))
	rm -f $_email_file
	return $_result
}

function send_slack() {
	(( $_alert_slack == 0 )) && return 0
	if [[ -x $_slack_cmd ]] ; then
		$_slack_cmd -C $_slack_cfg -m "$_slack_msg process $_my_proc, count is $_counter"
		return $?
	fi
	return 1
}

function send_pd() {
	(( $_alert_pd == 0 )) && return 0
	if [[ -x $_pd_cmd ]] ; then
		$_pd_cmd -C $_pd_cfg --tag "$_pd_tag" --description "$_pd_description" \
			--detail "$_pd_detail process $_my_proc, count is $_counter"
		return $?
	fi
	return 1
}

function get_given_options() {
	local _option_count=0 ; local _option_proc=0
	local _has_error=0
	while [[ -n "$1" ]]
	do
		case "$1" in
			 '-p'|'--proc')
					_my_proc="$2" ; shift ; let _option_proc++ ;;
			 '-c'|'--count')
					_my_count="$2" ; shift ; let _option_count++ ;;
			'-v'|'--version') echo $_echo_flag "$_version" ; exit $_state_ok ; ;;

			*)		help $_state_ok ;; 	# Which includes -h and --help
		esac
		shift
	done

	(( $_option_proc != 1 )) && echo_and_log "\n\t: -p missing or given more than once." && let _has_error++
	(( $_option_count > 1 )) && echo_and_log "\n\t: -c can only be given once." && let _has_error++
	(( $_has_error != 0 )) && help $_state_critical
	if (( $_option_count == 1 )) ; then
		_my_min=${_my_count%:*}
		_my_max=${_my_count#*:}
	fi
	return 0
}

function isRoot() {
	if (($(id -u) != 0)) ; then
		echo $_echo_flag "\n\t*** $_program: this script must be run as the user root ***\n" >&2
		return 1
	fi
	return 0
}

function check_running() {
	if [[ -f "$_lockfile" ]]; then
		/bin/ps -p $(cat $_lockfile) > /dev/null 2>&1
		if (( $? == 0 )) ; then
			echo_and_log "*** There is already a $_program running, execution has been terminated. ***"
			echo_and_log "*** If this is an error please remove the lock file: $_lockfile ***"
			exit $_state_ok
		else
			echo_and_log "*** Lock file found and deleted since there is no process with that pid ***"
			rm -rf $_lockfile > /dev/null 2>&1
		fi
	fi
	if ! mkdir -p "$_work_dir" > /dev/null 2>&1 ; then
		echo_and_log "*** $_state_critical_msg: Unable to create file working directory $_work_dir! ***"
		exit $_state_critical
	fi
	echo "$_opid" > "$_lockfile"
	return 0
}

function send_alert() {
	send_mail
	send_slack
	send_pd
	return 0
}

function check_it() {
	local _result=0
	for _proc_cmdline in $(ls -1d /proc/[0-9]*/cmdline)
	do
		if [[ -f ${_proc_cmdline} ]] ; then
			cat ${_proc_cmdline} | xargs -0 | egrep --silent "^$_my_proc"
			(( $? == 0 )) && let _counter++
		fi
	done

	if (( $_counter < $_my_min )) || (( $_counter > $_my_max )) ; then
		_result=$_state_critical
	fi
	return $_result
}

function main() {
	local _var_exit=$_state_ok

	if (( $_need_root == 1 )) ; then
		 isRoot
		(( $? != 0 )) && echo $_echo_flag "$_info" && exit 255
	fi
	get_given_options "$@"
	(( $_need_lock == 1 )) && check_running
	check_it
	_var_exit=$?

	clean_up
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	case $_var_exit
	in
		0)	echo_and_log "$_program $_state_ok_msg : process $_my_proc count is $_counter" ;;
		*)	echo_and_log "$_program $_state_critical_msg : process $_my_proc count is $_counter need $_my_count"
			send_alert
			_var_exit=$_state_critical ;;
	esac
	exit $_var_exit
}
main "$@"
